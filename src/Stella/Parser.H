/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef STELLA_PARSER_HEADER_FILE
#define STELLA_PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"

namespace Stella
{
Program* pProgram(FILE *inp);
Program* pProgram(const char *str);
ListStellaIdent* pListStellaIdent(FILE *inp);
ListStellaIdent* pListStellaIdent(const char *str);
LanguageDecl* pLanguageDecl(FILE *inp);
LanguageDecl* pLanguageDecl(const char *str);
Extension* pExtension(FILE *inp);
Extension* pExtension(const char *str);
ListExtensionName* pListExtensionName(FILE *inp);
ListExtensionName* pListExtensionName(const char *str);
ListExtension* pListExtension(FILE *inp);
ListExtension* pListExtension(const char *str);
Decl* pDecl(FILE *inp);
Decl* pDecl(const char *str);
ListDecl* pListDecl(FILE *inp);
ListDecl* pListDecl(const char *str);
LocalDecl* pLocalDecl(FILE *inp);
LocalDecl* pLocalDecl(const char *str);
ListLocalDecl* pListLocalDecl(FILE *inp);
ListLocalDecl* pListLocalDecl(const char *str);
Annotation* pAnnotation(FILE *inp);
Annotation* pAnnotation(const char *str);
ListAnnotation* pListAnnotation(FILE *inp);
ListAnnotation* pListAnnotation(const char *str);
ParamDecl* pParamDecl(FILE *inp);
ParamDecl* pParamDecl(const char *str);
ListParamDecl* pListParamDecl(FILE *inp);
ListParamDecl* pListParamDecl(const char *str);
ReturnType* pReturnType(FILE *inp);
ReturnType* pReturnType(const char *str);
ThrowType* pThrowType(FILE *inp);
ThrowType* pThrowType(const char *str);
Type* pType9(FILE *inp);
Type* pType9(const char *str);
ListType* pListType9(FILE *inp);
ListType* pListType9(const char *str);
MatchCase* pMatchCase(FILE *inp);
MatchCase* pMatchCase(const char *str);
ListMatchCase* pListMatchCase(FILE *inp);
ListMatchCase* pListMatchCase(const char *str);
OptionalTyping* pOptionalTyping(FILE *inp);
OptionalTyping* pOptionalTyping(const char *str);
PatternData* pPatternData(FILE *inp);
PatternData* pPatternData(const char *str);
ExprData* pExprData(FILE *inp);
ExprData* pExprData(const char *str);
Pattern* pPattern(FILE *inp);
Pattern* pPattern(const char *str);
ListPattern* pListPattern(FILE *inp);
ListPattern* pListPattern(const char *str);
LabelledPattern* pLabelledPattern(FILE *inp);
LabelledPattern* pLabelledPattern(const char *str);
ListLabelledPattern* pListLabelledPattern(FILE *inp);
ListLabelledPattern* pListLabelledPattern(const char *str);
Binding* pBinding(FILE *inp);
Binding* pBinding(const char *str);
ListBinding* pListBinding(FILE *inp);
ListBinding* pListBinding(const char *str);
Expr* pExpr(FILE *inp);
Expr* pExpr(const char *str);
ListExpr* pListExpr(FILE *inp);
ListExpr* pListExpr(const char *str);
Expr* pExpr1(FILE *inp);
Expr* pExpr1(const char *str);
PatternBinding* pPatternBinding(FILE *inp);
PatternBinding* pPatternBinding(const char *str);
ListPatternBinding* pListPatternBinding(FILE *inp);
ListPatternBinding* pListPatternBinding(const char *str);
Expr* pExpr2(FILE *inp);
Expr* pExpr2(const char *str);
ListExpr* pListExpr2(FILE *inp);
ListExpr* pListExpr2(const char *str);
Expr* pExpr3(FILE *inp);
Expr* pExpr3(const char *str);
Expr* pExpr4(FILE *inp);
Expr* pExpr4(const char *str);
Expr* pExpr6(FILE *inp);
Expr* pExpr6(const char *str);
Expr* pExpr7(FILE *inp);
Expr* pExpr7(const char *str);
Type* pType(FILE *inp);
Type* pType(const char *str);
Type* pType1(FILE *inp);
Type* pType1(const char *str);
Type* pType2(FILE *inp);
Type* pType2(const char *str);
Type* pType3(FILE *inp);
Type* pType3(const char *str);
ListType* pListType(FILE *inp);
ListType* pListType(const char *str);
Expr* pExpr5(FILE *inp);
Expr* pExpr5(const char *str);
VariantFieldType* pVariantFieldType(FILE *inp);
VariantFieldType* pVariantFieldType(const char *str);
ListVariantFieldType* pListVariantFieldType(FILE *inp);
ListVariantFieldType* pListVariantFieldType(const char *str);
RecordFieldType* pRecordFieldType(FILE *inp);
RecordFieldType* pRecordFieldType(const char *str);
ListRecordFieldType* pListRecordFieldType(FILE *inp);
ListRecordFieldType* pListRecordFieldType(const char *str);
Typing* pTyping(FILE *inp);
Typing* pTyping(const char *str);
}

#endif
